{"version":3,"sources":["Todo.js","firebase.js","App.js","reportWebVitals.js","index.js"],"names":["Todo","props","List","className","ListItem","ListItemAvatar","ListItemText","primary","text","secondary","db","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","App","useState","todos","setTodos","input","setInput","useEffect","collection","onSnapshot","snapshot","docs","map","doc","data","todo","FormControl","InputLabel","Input","value","onChange","event","target","Button","disabled","type","onClick","preventDefault","add","timestamp","FieldValue","serverTimestamp","variant","color","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gUAmBeA,MAdf,SAAcC,GACV,OACI,cAACC,EAAA,EAAD,CAAMC,UAAU,YAAhB,SACI,eAACC,EAAA,EAAD,WACI,cAACC,EAAA,EAAD,IAEA,cAACC,EAAA,EAAD,CAAcC,QAASN,EAAMO,KAAMC,UAAU,yB,QCG9CC,EAXKC,IAASC,cAAc,CACvCC,OAAQ,0CACRC,WAAY,oCACZC,UAAW,oBACXC,cAAe,gCACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iBAGIC,YC6CRC,MAlDf,WAAgB,IAAD,EACaC,mBAAS,IADtB,mBACNC,EADM,KACCC,EADD,OAEaF,mBAAS,IAFtB,mBAENG,EAFM,KAECC,EAFD,KAuBb,OAnBAC,qBAAU,WAERjB,EAAGkB,WAAW,SAASC,YAAW,SAAAC,GAChCN,EAASM,EAASC,KAAKC,KAAI,SAAAC,GAAG,OAAIA,EAAIC,OAAOC,cAE9C,IAeD,sBAAKhC,UAAU,MAAf,UACE,iCAEE,eAACiC,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,2BACA,cAACC,EAAA,EAAD,CAAOC,MAAOd,EAAOe,SAAU,SAAAC,GAAK,OAAIf,EAASe,EAAMC,OAAOH,aAEhE,cAACI,EAAA,EAAD,CAAQC,UAAWnB,EAAOoB,KAAK,SAASC,QApB9B,SAACL,GACfA,EAAMM,iBAENrC,EAAGkB,WAAW,SAASoB,IAAI,CACzBb,KAAMV,EACNwB,UAAWtC,IAASS,UAAU8B,WAAWC,oBAG3C3B,EAAS,GAAD,mBAAKD,GAAL,CAAYE,KACpBC,EAAS,KAWqD0B,QAAQ,YAAYC,MAAM,UAApF,yBAOF,6BACG9B,EAAMS,KAAI,SAAAG,GAAI,OACb,cAAC,EAAD,CAAM3B,KAAM2B,aCpCPmB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.396e0b73.chunk.js","sourcesContent":["// use rfce for component snnipet\nimport React from 'react';\nimport './Todo.css';\nimport { List, ListItem, ListItemText, ListItemAvatar } from '@material-ui/core';\n\nfunction Todo(props) {\n    return (\n        <List className=\"todo_list\">\n            <ListItem>\n                <ListItemAvatar>\n                </ListItemAvatar>\n                <ListItemText primary={props.text} secondary=\"Dummy Deadline\" />\n            </ListItem>\n\n             {/* <li>{props.text}</li> */}\n             </List>\n    )\n}\n\nexport default Todo\n","\nimport firebase from \"firebase\";\n\nconst firebaseApp = firebase.initializeApp({\n    apiKey: \"AIzaSyB2lZ1D1G7At0rVYrS5l2lp6-lxOensPEs\",\n    authDomain: \"todo-app-cp-815ac.firebaseapp.com\",\n    projectId: \"todo-app-cp-815ac\",\n    storageBucket: \"todo-app-cp-815ac.appspot.com\",\n    messagingSenderId: \"662392912610\",\n    appId: \"1:662392912610:web:0ee8c366fc1a2c17037cbb\",\n    measurementId: \"G-5MZC7DZR4V\"\n})\n\nconst db = firebaseApp.firestore();\nexport default db;","import './App.css';\nimport React, { useState, useEffect } from 'react';\nimport { FormControl, Button, InputLabel, Input } from '@material-ui/core';\nimport Todo from './Todo';\nimport db from './firebase';\nimport firebase from 'firebase';\n\n\nfunction App() {\n  const [todos, setTodos] = useState([]);\n  const [input, setInput] = useState('');\n\n  useEffect(() => {\n    //this code here...fores when the app.js loads\n    db.collection('todos').onSnapshot(snapshot => {\n      setTodos(snapshot.docs.map(doc => doc.data().todo))\n    })\n  }, []);\n\n  const addTodo = (event) => {\n    event.preventDefault(); // Stop refresh\n\n    db.collection('todos').add({\n      todo: input,\n      timestamp: firebase.firestore.FieldValue.serverTimestamp()\n    })\n\n    setTodos([...todos, input]);\n    setInput(''); // Clear up the input after clicking\n  }\n\n  return (\n    <div className=\"App\">\n      <form>\n        {/* <input value={input} onChange={event => setInput(event.target.value)}/> */}\n        <FormControl>\n          <InputLabel>Write a Todo</InputLabel>\n          <Input value={input} onChange={event => setInput(event.target.value)}/>\n        </FormControl>\n        <Button disabled={!input} type=\"submit\" onClick={addTodo} variant=\"contained\" color=\"primary\">\n        Add Todo\n        </Button>\n\n        {/* <button type=\"submit\" onClick={addTodo}>Add Todo</button> */}\n      </form>\n\n      <ul>\n        {todos.map(todo => (\n          <Todo text={todo}/> \n          // <li>{todo}</li>\n        \n        ))}\n      </ul>\n\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}